module alu_16bit (
    input  [15:0] A,           // First operand
    input  [15:0] B,           // Second operand
    input  [3:0]  ALU_Sel,     // 4-bit selector for operation
    output reg [15:0] ALU_Out, // ALU result
    output Zero,               // Zero flag
    output reg CarryOut,       // Carry or borrow flag
    output reg Overflow        // Overflow flag
);

    reg [16:0] tmp; // To capture carry/borrow/overflow

    always @(*) begin
        CarryOut = 0;
        Overflow = 0;
        case (ALU_Sel)
            4'b0000: begin
                tmp = A + B;
                ALU_Out = tmp[15:0];
                CarryOut = tmp[16];
                Overflow = (~A[15] & ~B[15] & ALU_Out[15]) | (A[15] & B[15] & ~ALU_Out[15]);
            end
            4'b0001: begin
                tmp = A - B;
                ALU_Out = tmp[15:0];
                CarryOut = tmp[16];
                Overflow = (A[15] & ~B[15] & ~ALU_Out[15]) | (~A[15] & B[15] & ALU_Out[15]);
            end
            4'b0010: ALU_Out = A & B;
            4'b0011: ALU_Out = A | B;
            4'b0100: ALU_Out = A ^ B;
            4'b0101: ALU_Out = ~A;
            4'b0110: ALU_Out = ~(A | B); // NOR
            4'b0111: ALU_Out = ~(A & B); // NAND
            4'b1000: ALU_Out = ~(A ^ B); // XNOR
            4'b1001: ALU_Out = A + 16'd1; // Increment
            4'b1010: ALU_Out = A - 16'd1; // Decrement
            4'b1011: ALU_Out = A << 1;    // Shift Left Logical
            4'b1100: ALU_Out = A >> 1;    // Shift Right Logical
            4'b1101: ALU_Out = $signed(A) >>> 1; // Arithmetic Shift Right
            4'b1110: ALU_Out = A;         // Pass Through A
            4'b1111: ALU_Out = B;         // Pass Through B
            default: ALU_Out = 16'd0;
        endcase
    end

    assign Zero = (ALU_Out == 16'd0) ? 1'b1 : 1'b0;

endmodule
