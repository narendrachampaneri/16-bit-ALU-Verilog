`timescale 1ns / 1ps

module alu_16bit_tb;

    // Testbench signals
    reg  [15:0] A;
    reg  [15:0] B;
    reg  [3:0]  ALU_Sel;
    wire [15:0] ALU_Out;
    wire Zero;
    wire CarryOut;
    wire Overflow;

    // Instantiate the ALU
    alu_16bit uut (
        .A(A),
        .B(B),
        .ALU_Sel(ALU_Sel),
        .ALU_Out(ALU_Out),
        .Zero(Zero),
        .CarryOut(CarryOut),
        .Overflow(Overflow)
    );

    initial begin
        $display("Start ALU 16-bit Testbench");

        // Test ADD
        A = 16'h0005;
        B = 16'h0003;
        ALU_Sel = 4'b0000;
        #10;
        $display("ADD: %h + %h = %h | Carry: %b | Overflow: %b | Zero: %b", 
                 A, B, ALU_Out, CarryOut, Overflow, Zero);

        // Test SUB
        A = 16'h0005;
        B = 16'h0003;
        ALU_Sel = 4'b0001;
        #10;
        $display("SUB: %h - %h = %h | Carry: %b | Overflow: %b | Zero: %b", 
                 A, B, ALU_Out, CarryOut, Overflow, Zero);

        // Test AND
        A = 16'hF0F0;
        B = 16'h0FF0;
        ALU_Sel = 4'b0010;
        #10;
        $display("AND: %h & %h = %h", A, B, ALU_Out);

        // Test OR
        A = 16'hF0F0;
        B = 16'h0FF0;
        ALU_Sel = 4'b0011;
        #10;
        $display("OR: %h | %h = %h", A, B, ALU_Out);

        // Test XOR
        A = 16'hAAAA;
        B = 16'h5555;
        ALU_Sel = 4'b0100;
        #10;
        $display("XOR: %h ^ %h = %h", A, B, ALU_Out);

        // Test NOT
        A = 16'h1234;
        ALU_Sel = 4'b0101;
        #10;
        $display("NOT: ~%h = %h", A, ALU_Out);

        // Test NOR
        A = 16'hFFFF;
        B = 16'h0000;
        ALU_Sel = 4'b0110;
        #10;
        $display("NOR: ~(%h | %h) = %h", A, B, ALU_Out);

        // Test NAND
        A = 16'hAAAA;
        B = 16'h5555;
        ALU_Sel = 4'b0111;
        #10;
        $display("NAND: ~(%h & %h) = %h", A, B, ALU_Out);

        // Test XNOR
        A = 16'hAAAA;
        B = 16'h5555;
        ALU_Sel = 4'b1000;
        #10;
        $display("XNOR: ~(%h ^ %h) = %h", A, B, ALU_Out);

        // Test Increment
        A = 16'h0001;
        ALU_Sel = 4'b1001;
        #10;
        $display("INC: %h + 1 = %h", A, ALU_Out);

        // Test Decrement
        A = 16'h0001;
        ALU_Sel = 4'b1010;
        #10;
        $display("DEC: %h - 1 = %h", A, ALU_Out);

        // Test Shift Left Logical
        A = 16'h0001;
        ALU_Sel = 4'b1011;
        #10;
        $display("SLL: %h << 1 = %h", A, ALU_Out);

        // Test Shift Right Logical
        A = 16'h8000;
        ALU_Sel = 4'b1100;
        #10;
        $display("SRL: %h >> 1 = %h", A, ALU_Out);

        // Test Arithmetic Shift Right
        A = 16'hF000; // Negative number in 2's complement
        ALU_Sel = 4'b1101;
        #10;
        $display("SRA: %h >>> 1 = %h", A, ALU_Out);

        // Test Pass A
        A = 16'hABCD;
        ALU_Sel = 4'b1110;
        #10;
        $display("PASS A: %h", ALU_Out);

        // Test Pass B
        B = 16'h1234;
        ALU_Sel = 4'b1111;
        #10;
        $display("PASS B: %h", ALU_Out);

        // Check Zero flag
        A = 16'h0000;
        B = 16'h0000;
        ALU_Sel = 4'b0000;
        #10;
        $display("ADD Zero Test: Zero = %b", Zero);

        $display("Testbench complete.");
        $stop;
    end

endmodule
